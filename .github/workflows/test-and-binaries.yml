name: Deployment

on: [push]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - name: Build classes
        run: ./gradlew -Pdev=true classes
      - name: Upload build
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build
  check:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: build
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - name: Build runtime image
        run: ./gradlew check -x checkstyleJmh -x checkstyleMain -x checkstyleTest
  checkstyle:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: build
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - name: Build runtime image
        run: ./gradlew checkstyleJmh checkstyleMain checkstyleTest
  testmysql:
    name: Test on MySQL
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Shutdown Ubuntu MySQL (SUDO)
        run: sudo service mysql stop # Shutdown the Default MySQL, "sudo" is necessary, please not remove it
      - uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3800
          container port: 3307
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mysql version: '8.0'
          mysql database: 'jabref'
          mysql root password: 'root'
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: build
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - name: Run database test
        run: ./gradlew databaseTest
        env:
          DBMS: "mysql"
  testpostgres:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: build
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - name: Run database test
        run: ./gradlew databaseTest
        env:
          DBMS: "postgresql"
  deploy:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
         - os: ubuntu-latest
           displayName: linux
           jpackageDownload: https://download.java.net/java/early_access/jpackage/1/openjdk-14-jpackage+1-70_linux-x64_bin.tar.gz
           jdk14Path: /jdk-14
           archivePortable: tar -czf build/distribution/JabRef-portable_linux.tar.gz -C build/distribution JabRef && rm -R build/distribution/JabRef
         - os: windows-latest
           displayName: windows
           jpackageDownload: https://download.java.net/java/early_access/jpackage/1/openjdk-14-jpackage+1-70_windows-x64_bin.zip
           jdk14Path: /jdk-14
           archivePortable: 7z a -r build/distribution/JabRef-portable_windows.zip ./build/distribution/JabRef && rm -R build/distribution/JabRef
         - os: macOS-latest
           displayName: macOS
           jpackageDownload: https://download.java.net/java/early_access/jpackage/1/openjdk-14-jpackage+1-70_osx-x64_bin.tar.gz
           jdk14Path: /jdk-14.jdk/Contents/Home
           archivePortable: tar -czf build/distribution/JabRef-portable_macos.tar.gz -C build/distribution JabRef.app && rm -R build/distribution/JabRef.app

    runs-on: ${{ matrix.os }}
    name: Deploy on ${{ matrix.displayName }}

    steps:
    - name: Checkout source
      uses: actions/checkout@v1
      with:
        depth: 1
        submodules: false
    - name: Download build
      uses: actions/download-artifact@v1
      with:
        name: build
    - name: Extract branch name
      shell: bash
      run: |
         ref=${GITHUB_REF#refs/heads/}
         ref=${ref#refs/pull/}
         ref=${ref%/merge}
         echo "##[set-output name=branch;]${ref}"
      id: extract_branch
    - uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.OS }}-gradle-${{ env.cache-name }}-
          ${{ runner.OS }}-gradle-
          ${{ runner.OS }}-
    - name: Download jpackage
      # We need to download jpackage from https://jdk.java.net/jpackage/
      run: |
        import tarfile
        import zipfile
        import sys
        if sys.version_info[0] >= 3:
          from urllib.request import urlretrieve
        else:
          from urllib import urlretrieve

        url = "${{ matrix.jpackageDownload }}"
        tmpfile, headers = urlretrieve(url)
        if (url.endswith("tar.gz")):
          tar = tarfile.open(tmpfile)
          tar.extractall()
          tar.close()
        elif (url.endswith("zip")):
          zip = zipfile.ZipFile(tmpfile)
          zip.extractall()
          zip.close()
      shell: python
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 13
    - name: Build runtime image
      run: ./gradlew -Pdev=true jlinkZip
    - name: Build installer
      run: |
        export BADASS_JLINK_JPACKAGE_HOME="${GITHUB_WORKSPACE}${{ matrix.jdk14Path }}"
        ./gradlew -Pdev=true jpackage
      shell: bash
    - name: Add installer as artifact
      uses: actions/upload-artifact@master
      with:
        name: JabRef-${{ matrix.displayName }}
        path: build/distribution
    - name: Package application image
      run: ${{ matrix.archivePortable }}
      shell: bash
    - name: Build and publish snap
      if: matrix.os == 'ubuntu-latest' && steps.extract_branch.outputs.branch == 'master'
      env:
        SNAPCRAFT_LOGIN_FILE: ${{ secrets.SNAPCRAFT_LOGIN_FILE }}
      run: |
          mkdir .snapcraft && echo ${SNAPCRAFT_LOGIN_FILE} | base64 --decode --ignore-garbage > .snapcraft/snapcraft.cfg
          docker run -v $(pwd):$(pwd) -t lyzardking/snapcraft-bionic sh -c "apt update -qq && cd $(pwd) && snapcraft && mv jabref*.snap build/distribution/ && snapcraft push build/distribution/jabref*.snap --release edge || true"
      shell: bash
    - name: Upload to builds.jabref.org
      uses: garygrossgarten/github-action-scp@release
      with:
        local: build/distribution
        remote: www/${{ steps.extract_branch.outputs.branch }}
        host: builds.jabref.org
        username: builds_jabref_org
        privateKey: ${{ secrets.buildJabRefPrivateKey }}
        port: 9922
